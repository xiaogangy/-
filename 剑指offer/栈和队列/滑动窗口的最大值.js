/**
 * @desc 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}；
 * 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。
 *
 * solution1: 暴力求解
 * 最简单最直观的方法，就是每次滑动窗口，然后在窗口中找到最大值。如果窗口大小为k，数组长度为n，则时间复杂度为O(nk);
 * solution2: 保存最大值的队列
 * 设想一下，假如我们有一个数据结构，其中保存当前滑动窗口中的最大值。滑动窗口中每进入一个值，我们就和之前的最大值比较，如果不如原来的最大值大，就输出当前数据结构中的最大值，但是要把这个新值放入数据结构中，
 * 因为它可能是后续滑动窗口的最大值；如果比原来的最大值大呢？把原来数据结构中的最大值弹出，然后把当前值作为新的最大值。这只是一个粗略的思路，但是我们可以看出双向队列可以担当这个数据结构的重任，如果对之前min栈
 * 那个算法题非常熟悉，会发现这里的思路和一个O(1)时间复杂度的max队列基本一致，下面我们来具体讨论一些细节：
 * 
 */